{"id":"../node_modules/lodash/_composeArgs.js","dependencies":[{"name":"C:\\Users\\nries\\dev\\findPow\\package.json","includedInParent":true,"mtime":1591071384316},{"name":"C:\\Users\\nries\\dev\\findPow\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1591068694500}],"generated":{"js":"/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersLength = holders.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(leftLength + rangeLength),\n      isUncurried = !isCurried;\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[holders[argsIndex]] = args[argsIndex];\n    }\n  }\n  while (rangeLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nmodule.exports = composeArgs;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/lodash/_composeArgs.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}}],"sources":{"../node_modules/lodash/_composeArgs.js":"/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersLength = holders.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(leftLength + rangeLength),\n      isUncurried = !isCurried;\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[holders[argsIndex]] = args[argsIndex];\n    }\n  }\n  while (rangeLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nmodule.exports = composeArgs;\n"},"lineCount":40}},"error":null,"hash":"74f0204b960f8ccde702dbf307fd0917","cacheData":{"env":{}}}